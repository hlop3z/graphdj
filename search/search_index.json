{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"index.html","text":"Welcome to the GraphDJ . GraphDJ is a Django Module (aka: App ) that\u2019s written to ease-development . Which makes your Django-Models more powerful right out-of-the-box . Install python -m pip install graphdj Dependencies Django Graphene-Django Django-Filter PyYAML Python-JSON-Logger Goal To simplify building the C.R.U.D system & automate the Documentation of the API . Setup/ \u2014 See Configs for example. roles/ Use yaml files to create your role(s) configurations. plurals.py Configure NOUNS = {} to pluralize manually. For example: { \"man\" : \"men\" } meaning { \"singular\" : \"plural\" } Roles Columns: [field_1, field_2, field_3: app.model] Related: [field_3 : app.model] Create & Update Use the \" singular \" verb as the field-name . Read Use the \" plural \" verb as the field-name . Settings/ \u2014 See Configs for example. base.py \u2014 Django's default settings. common.py \u2014 Used in (development, test & production) development.py i18n.py production.py test.py","title":"Introduction"},{"location":"index.html#install","text":"python -m pip install graphdj","title":"Install"},{"location":"index.html#dependencies","text":"Django Graphene-Django Django-Filter PyYAML Python-JSON-Logger","title":"Dependencies"},{"location":"index.html#goal","text":"To simplify building the C.R.U.D system & automate the Documentation of the API .","title":"Goal"},{"location":"index.html#setup-see-configs-for-example","text":"roles/ Use yaml files to create your role(s) configurations. plurals.py Configure NOUNS = {} to pluralize manually. For example: { \"man\" : \"men\" } meaning { \"singular\" : \"plural\" }","title":"Setup/ \u2014 See Configs for example."},{"location":"index.html#roles","text":"Columns: [field_1, field_2, field_3: app.model] Related: [field_3 : app.model]","title":"Roles"},{"location":"index.html#create-update","text":"Use the \" singular \" verb as the field-name .","title":"Create &amp; Update"},{"location":"index.html#read","text":"Use the \" plural \" verb as the field-name .","title":"Read"},{"location":"index.html#settings-see-configs-for-example","text":"base.py \u2014 Django's default settings. common.py \u2014 Used in (development, test & production) development.py i18n.py production.py test.py","title":"Settings/ \u2014 See Configs for example."},{"location":"client.html","text":"Client \u2014 Request JavaScript /** * GraphQL - Quering */ const Query = ` query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } ` /** * GraphQL - Variables */ const Variables = { \"id\" : 1 } /** * Fetch - Data */ fetch ( 'http://127.0.0.1:8000/graphql/' , { method : 'POST' , mode : 'cors' , body : JSON . stringify ({ query : Query , variables : Variables , }), headers : { 'Content-Type' : 'application/json' , }, }) . then ( ( res ) => res . json () ) . then ( ( result ) => console . log ( result ) ); Python import requests Query = \"\"\" query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } \"\"\" Variables = { \"id\" : 1 } url = 'http://127.0.0.1:8000/graphql/' r = requests . post ( url , json = { 'query' : Query , 'variables' : Variables }) print ( r . status_code ) print ( r . json () )","title":"Client"},{"location":"client.html#client-request","text":"JavaScript /** * GraphQL - Quering */ const Query = ` query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } ` /** * GraphQL - Variables */ const Variables = { \"id\" : 1 } /** * Fetch - Data */ fetch ( 'http://127.0.0.1:8000/graphql/' , { method : 'POST' , mode : 'cors' , body : JSON . stringify ({ query : Query , variables : Variables , }), headers : { 'Content-Type' : 'application/json' , }, }) . then ( ( res ) => res . json () ) . then ( ( result ) => console . log ( result ) ); Python import requests Query = \"\"\" query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } \"\"\" Variables = { \"id\" : 1 } url = 'http://127.0.0.1:8000/graphql/' r = requests . post ( url , json = { 'query' : Query , 'variables' : Variables }) print ( r . status_code ) print ( r . json () )","title":"Client \u2014 Request"},{"location":"commands.html","text":"Build \u2014 Roles Output \u2014> Files core/roles.py and core/javascript/roles.js python manage.py build-roles Build \u2014 Models Output \u2014> File core/javascript/models.js python manage.py build-models","title":"Commands"},{"location":"commands.html#build-roles","text":"Output \u2014> Files core/roles.py and core/javascript/roles.js python manage.py build-roles","title":"Build \u2014 Roles"},{"location":"commands.html#build-models","text":"Output \u2014> File core/javascript/models.js python manage.py build-models","title":"Build \u2014 Models"},{"location":"pipenv.html","text":"Install to Core python -m pipenv install { package_or_module_name } Install to Development python -m pipenv install { package_or_module_name } --dev Save Requirements for Production & Development python -m pipenv lock Recreate in Production python -m pipenv install --ignore-pipfile Recreate in Development python -m pipenv install --dev Detection of Security Vulnerabilities python -m pipenv check Tree-like structure Dependencies python -m pipenv graph","title":"Pipenv"},{"location":"pipenv.html#install-to-core","text":"python -m pipenv install { package_or_module_name }","title":"Install to Core"},{"location":"pipenv.html#install-to-development","text":"python -m pipenv install { package_or_module_name } --dev","title":"Install to Development"},{"location":"pipenv.html#save-requirements-for-production-development","text":"python -m pipenv lock","title":"Save Requirements for Production &amp; Development"},{"location":"pipenv.html#recreate-in-production","text":"python -m pipenv install --ignore-pipfile","title":"Recreate in Production"},{"location":"pipenv.html#recreate-in-development","text":"python -m pipenv install --dev","title":"Recreate in Development"},{"location":"pipenv.html#detection-of-security-vulnerabilities","text":"python -m pipenv check","title":"Detection of Security Vulnerabilities"},{"location":"pipenv.html#tree-like-structure-dependencies","text":"python -m pipenv graph","title":"Tree-like structure Dependencies"},{"location":"tutorial/configs.html","text":"Important paths to remember. project_name/settings/common.py \u2014> settings.py project_name/urls.py setup/roles/any-custom-role-belongs-here.yaml settings.py import os import sys from core.roles import ROLES # Include apps/ sys . path . insert ( 0 , os . path . join ( BASE_DIR , \"apps\" )) # Include Core Apps INSTALLED_APPS += [ # Filters \"django_filters\" , # GraphQL \"graphene_django\" , # GraphDJ \"graphdj\" , # CORS #\"corsheaders\", ] # GraphQL -> Graphene GRAPHENE = { \"ATOMIC_MUTATIONS\" : True , \"RELAY_CONNECTION_MAX_LIMIT\" : 100 , } # Add your <project-apps> here. GRAPHDJ = { \"ADMIN\" : True , \"CAMELCASE\" : True , \"LOGGING\" : True , \"ROLES_ACCESS\" : ROLES , \"DEFAULT_ROLE\" : 1 , \"QUERIES_INFO\" : \"Awesome Queries!\" , \"MUTATIONS_INFO\" : \"Awesome Mutations!\" , \"ROLES\" : { 0 : \"admin\" , 1 : \"customer\" , 2 : \"employee\" , 3 : \"manager\" , }, \"APPS\" : [ \"app_1\" , \"app_2\" , \"app_3\" , \"app_4\" , # ... ], } INSTALLED_APPS . extend ( GRAPHDJ [ \"APPS\" ]) urls.py import graphdj from django.conf import settings from django.contrib import admin from django.urls import path from django.views.decorators.csrf import csrf_exempt from graphene_django.views import GraphQLView # Require Login class PrivateGraphQLView ( LoginRequiredMixin , GraphQLView ): pass # The Schema schema = graphdj . schema () # Setup middleware = [] if not settings . DEBUG : middleware . append ( graphdj . DisableIntrospect ) # GraphQL Api GapiView = csrf_exempt ( #GraphQLView PrivateGraphQLView . as_view ( graphiql = settings . DEBUG , schema = schema , middleware = middleware ) ) # URLs urlpatterns = [ path ( \"admin/\" , admin . site . urls ), path ( \"graphql/\" , GapiView ), ] setup/roles/example.yaml # Role customer : # App cookbook : # Model-1 category : create : [ id , name ] update : [ id , name ] read : [ id , name , ingredients : cookbook.ingredient ] delete : [ del ] # Model-2 ingredient : create : [ id , name , category : cookbook.category ] update : [ id , name , category : cookbook.category ] read : [ id , name , recipes : cookbook.recipe ] delete : [ del ] # Model-3 recipe : create : [ id , name ] update : [ id , name ] read : [ id , name ] delete : [ del ] setup/plurals.py NOUNS = { \"person\" : \"people\" , \"man\" : \"men\" , \"woman\" : \"women\" }","title":"Configs"},{"location":"tutorial/configs.html#important-paths-to-remember","text":"project_name/settings/common.py \u2014> settings.py project_name/urls.py setup/roles/any-custom-role-belongs-here.yaml settings.py import os import sys from core.roles import ROLES # Include apps/ sys . path . insert ( 0 , os . path . join ( BASE_DIR , \"apps\" )) # Include Core Apps INSTALLED_APPS += [ # Filters \"django_filters\" , # GraphQL \"graphene_django\" , # GraphDJ \"graphdj\" , # CORS #\"corsheaders\", ] # GraphQL -> Graphene GRAPHENE = { \"ATOMIC_MUTATIONS\" : True , \"RELAY_CONNECTION_MAX_LIMIT\" : 100 , } # Add your <project-apps> here. GRAPHDJ = { \"ADMIN\" : True , \"CAMELCASE\" : True , \"LOGGING\" : True , \"ROLES_ACCESS\" : ROLES , \"DEFAULT_ROLE\" : 1 , \"QUERIES_INFO\" : \"Awesome Queries!\" , \"MUTATIONS_INFO\" : \"Awesome Mutations!\" , \"ROLES\" : { 0 : \"admin\" , 1 : \"customer\" , 2 : \"employee\" , 3 : \"manager\" , }, \"APPS\" : [ \"app_1\" , \"app_2\" , \"app_3\" , \"app_4\" , # ... ], } INSTALLED_APPS . extend ( GRAPHDJ [ \"APPS\" ]) urls.py import graphdj from django.conf import settings from django.contrib import admin from django.urls import path from django.views.decorators.csrf import csrf_exempt from graphene_django.views import GraphQLView # Require Login class PrivateGraphQLView ( LoginRequiredMixin , GraphQLView ): pass # The Schema schema = graphdj . schema () # Setup middleware = [] if not settings . DEBUG : middleware . append ( graphdj . DisableIntrospect ) # GraphQL Api GapiView = csrf_exempt ( #GraphQLView PrivateGraphQLView . as_view ( graphiql = settings . DEBUG , schema = schema , middleware = middleware ) ) # URLs urlpatterns = [ path ( \"admin/\" , admin . site . urls ), path ( \"graphql/\" , GapiView ), ] setup/roles/example.yaml # Role customer : # App cookbook : # Model-1 category : create : [ id , name ] update : [ id , name ] read : [ id , name , ingredients : cookbook.ingredient ] delete : [ del ] # Model-2 ingredient : create : [ id , name , category : cookbook.category ] update : [ id , name , category : cookbook.category ] read : [ id , name , recipes : cookbook.recipe ] delete : [ del ] # Model-3 recipe : create : [ id , name ] update : [ id , name ] read : [ id , name ] delete : [ del ] setup/plurals.py NOUNS = { \"person\" : \"people\" , \"man\" : \"men\" , \"woman\" : \"women\" }","title":"Important paths to remember."},{"location":"tutorial/install.html","text":"Do install","title":"Install"},{"location":"tutorial/install.html#do-install","text":"","title":"Do install"},{"location":"tutorial/models.html","text":"models.py from django.db import models class Category ( models . Model ): \"\"\"This is a Model Description.\"\"\" name = models . CharField ( max_length = 100 , help_text = \"Field Description.\" ) def __str__ ( self ): return self . name class Graphql : \"\"\"Model C.R.U.D\"\"\" def create ( this , model , info , kwargs ): form = this . form ( kwargs ) if form . is_valid (): return this . create ( ** kwargs ) def update ( this , model , info , ids , kwargs ): form = this . form ( kwargs ) if form . is_valid (): objects = model . objects . filter ( id__in = ids ) return this . update ( objects , kwargs ) def delete ( this , model , info , ids ): return model . objects . filter ( id__in = ids ) def read_one ( this , model , info , id ): return model . objects . get ( pk = id ) def read_all ( this , model , info , ** kwargs ): return model . objects . filter () with GraphqlBase from django.db import models from graphdj.models import GraphqlBase class Category ( GraphqlBase ): \"\"\"This is a Model Description.\"\"\" name = models . CharField ( max_length = 100 , help_text = \"Field Description.\" ) def __str__ ( self ): return self . name with GraphqlMixin from django.db import models from graphdj.models import GraphqlMixin class Category ( models . Model ): \"\"\"This is a Model Description.\"\"\" name = models . CharField ( max_length = 100 , help_text = \"Field Description.\" ) def __str__ ( self ): return self . name class Graphql ( GraphqlMixin ): pass Button","title":"Models"},{"location":"tutorial/user.html","text":"Add to apps/api/models.py from django.conf import settings from django.contrib.auth.models import AbstractUser # Create your models here. from django.db import models from graphdj.models import GraphqlMixin ROLES = settings . GRAPHDJ . get ( \"ROLES\" ) DEFAULT_ROLE = settings . GRAPHDJ . get ( \"DEFAULT_ROLE\" ) class User ( AbstractUser ): username = models . CharField ( max_length = 128 , unique = True ) role = models . PositiveSmallIntegerField ( choices = ROLES . items (), blank = True , null = True , default = DEFAULT_ROLE ) def __str__ ( self ): return self . username class Meta : db_table = \"user\" class Graphql ( GraphqlMixin ): pass Run Migrations python manage.py makemigrations api python manage.py migrate","title":"User"},{"location":"tutorial/user.html#add-to-appsapimodelspy","text":"from django.conf import settings from django.contrib.auth.models import AbstractUser # Create your models here. from django.db import models from graphdj.models import GraphqlMixin ROLES = settings . GRAPHDJ . get ( \"ROLES\" ) DEFAULT_ROLE = settings . GRAPHDJ . get ( \"DEFAULT_ROLE\" ) class User ( AbstractUser ): username = models . CharField ( max_length = 128 , unique = True ) role = models . PositiveSmallIntegerField ( choices = ROLES . items (), blank = True , null = True , default = DEFAULT_ROLE ) def __str__ ( self ): return self . username class Meta : db_table = \"user\" class Graphql ( GraphqlMixin ): pass","title":"Add to apps/api/models.py"},{"location":"tutorial/user.html#run-migrations","text":"python manage.py makemigrations api python manage.py migrate","title":"Run Migrations"}]}