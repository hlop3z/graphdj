{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Welcome to GraphDJ . GraphDJ is a Django Module (aka: App ) that\u2019s written to ease-development . Which makes your Django-Models more powerful right out-of-the-box . Install python -m pip install graphdj Dependencies Django Graphene-Django Django-Filter PyYAML Python-JSON-Logger Goal To simplify building the C.R.U.D system & automate the Documentation of the API . Features Role Based Access Control ( RBAC ). Model's Create, Read, Update & Delete ( CRUD ) integrated functions yet customizables. Transform Roles & Models into JavaScript files. Auto-generated documentation from the apps and their models. Pluralization of the model's name. Example: Person \u2014> People Important paths to remember . project_name/setup/roles/ any-custom-role-belongs-here.yaml project_name/setup/ plurals.py project_name/project_name/ urls.py project_name/project_name/ settings.py In the Tutorial this file is called common.py project_name/project_name/settings/ common.py","title":"Introduction"},{"location":"#install","text":"python -m pip install graphdj","title":"Install"},{"location":"#dependencies","text":"Django Graphene-Django Django-Filter PyYAML Python-JSON-Logger","title":"Dependencies"},{"location":"#goal","text":"To simplify building the C.R.U.D system & automate the Documentation of the API .","title":"Goal"},{"location":"#features","text":"Role Based Access Control ( RBAC ). Model's Create, Read, Update & Delete ( CRUD ) integrated functions yet customizables. Transform Roles & Models into JavaScript files. Auto-generated documentation from the apps and their models. Pluralization of the model's name. Example: Person \u2014> People","title":"Features"},{"location":"#important-paths-to-remember","text":"project_name/setup/roles/ any-custom-role-belongs-here.yaml project_name/setup/ plurals.py project_name/project_name/ urls.py project_name/project_name/ settings.py In the Tutorial this file is called common.py project_name/project_name/settings/ common.py","title":"Important paths to remember."},{"location":"client/","text":"Client \u2014 Request JavaScript /** * GraphQL - Quering */ const Query = ` query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } ` /** * GraphQL - Variables */ const Variables = { \"id\" : 1 } /** * Fetch - Data */ fetch ( 'http://127.0.0.1:8000/graphql/' , { method : 'POST' , mode : 'cors' , body : JSON . stringify ({ query : Query , variables : Variables , }), headers : { 'Content-Type' : 'application/json' , }, }) . then ( ( res ) => res . json () ) . then ( ( result ) => console . log ( result ) ); Python import requests Query = \"\"\" query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } \"\"\" Variables = { \"id\" : 1 } url = 'http://127.0.0.1:8000/graphql/' r = requests . post ( url , json = { 'query' : Query , 'variables' : Variables }) print ( r . status_code ) print ( r . json () )","title":"Client"},{"location":"client/#client-request","text":"JavaScript /** * GraphQL - Quering */ const Query = ` query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } ` /** * GraphQL - Variables */ const Variables = { \"id\" : 1 } /** * Fetch - Data */ fetch ( 'http://127.0.0.1:8000/graphql/' , { method : 'POST' , mode : 'cors' , body : JSON . stringify ({ query : Query , variables : Variables , }), headers : { 'Content-Type' : 'application/json' , }, }) . then ( ( res ) => res . json () ) . then ( ( result ) => console . log ( result ) ); Python import requests Query = \"\"\" query getMovie($id: Int) { movie(id: $id) { id title actors { id name } } } \"\"\" Variables = { \"id\" : 1 } url = 'http://127.0.0.1:8000/graphql/' r = requests . post ( url , json = { 'query' : Query , 'variables' : Variables }) print ( r . status_code ) print ( r . json () )","title":"Client \u2014 Request"},{"location":"commands/","text":"Create \u2014 App Output \u2014> App Directory (aka: Folder ) python manage.py create-app your_app_name_here Build \u2014 Roles Output \u2014> Files core/roles.py and core/javascript/roles.js python manage.py build-roles Build \u2014 Models.js Output \u2014> File core/javascript/models.js python manage.py build-models","title":"Commands"},{"location":"commands/#create-app","text":"Output \u2014> App Directory (aka: Folder ) python manage.py create-app your_app_name_here","title":"Create \u2014 App"},{"location":"commands/#build-roles","text":"Output \u2014> Files core/roles.py and core/javascript/roles.js python manage.py build-roles","title":"Build \u2014 Roles"},{"location":"commands/#build-modelsjs","text":"Output \u2014> File core/javascript/models.js python manage.py build-models","title":"Build \u2014 Models.js"},{"location":"pipenv/","text":"Shell python -m pipenv shell Run python -m pipenv run { command } Install to Core python -m pipenv install { package_or_module_name } Install to Development python -m pipenv install { package_or_module_name } --dev Save Requirements for Production & Development python -m pipenv lock Recreate in Production python -m pipenv install --ignore-pipfile Recreate in Development python -m pipenv install --dev Detection of Security Vulnerabilities python -m pipenv check Tree-like structure Dependencies python -m pipenv graph","title":"Pipenv"},{"location":"pipenv/#shell","text":"python -m pipenv shell","title":"Shell"},{"location":"pipenv/#run","text":"python -m pipenv run { command }","title":"Run"},{"location":"pipenv/#install-to-core","text":"python -m pipenv install { package_or_module_name }","title":"Install to Core"},{"location":"pipenv/#install-to-development","text":"python -m pipenv install { package_or_module_name } --dev","title":"Install to Development"},{"location":"pipenv/#save-requirements-for-production-development","text":"python -m pipenv lock","title":"Save Requirements for Production &amp; Development"},{"location":"pipenv/#recreate-in-production","text":"python -m pipenv install --ignore-pipfile","title":"Recreate in Production"},{"location":"pipenv/#recreate-in-development","text":"python -m pipenv install --dev","title":"Recreate in Development"},{"location":"pipenv/#detection-of-security-vulnerabilities","text":"python -m pipenv check","title":"Detection of Security Vulnerabilities"},{"location":"pipenv/#tree-like-structure-dependencies","text":"python -m pipenv graph","title":"Tree-like structure Dependencies"},{"location":"configure/models/","text":"models.py from django.db import models class Category ( models . Model ): \"\"\"This is a Model Description.\"\"\" name = models . CharField ( max_length = 100 , help_text = \"Field Description.\" ) def __str__ ( self ): return self . name class Graphql : \"\"\"Model C.R.U.D\"\"\" def create ( this , model , info , kwargs ): form = this . form ( kwargs ) if form . is_valid (): return this . create ( ** kwargs ) def update ( this , model , info , ids , kwargs ): form = this . form ( kwargs ) if form . is_valid (): objects = model . objects . filter ( id__in = ids ) return this . update ( objects , kwargs ) def delete ( this , model , info , ids ): return model . objects . filter ( id__in = ids ) def read_one ( this , model , info , id ): return model . objects . get ( pk = id ) def read_all ( this , model , info , ** kwargs ): return model . objects . filter () with GraphqlBase from django.db import models from graphdj.models import GraphqlBase class Category ( GraphqlBase ): \"\"\"This is a Model Description.\"\"\" name = models . CharField ( max_length = 100 , help_text = \"Field Description.\" ) def __str__ ( self ): return self . name with GraphqlMixin from django.db import models from graphdj.models import GraphqlMixin class Category ( models . Model ): \"\"\"This is a Model Description.\"\"\" name = models . CharField ( max_length = 100 , help_text = \"Field Description.\" ) def __str__ ( self ): return self . name class Graphql ( GraphqlMixin ): pass","title":"Models"},{"location":"configure/settings/","text":"Settings.py After setting up your roles . You can update your core/roles.py file by running the following custom django command . python manage.py build-roles You can then use the roles inside your settings following the example below. Fields : ADMIN \u2014> (Default: False ) Auto-include models in your Django's Admin page. CAMELCASE \u2014> (Default: False ) Transform cookbook_category into cookbookCategory . LOGGING \u2014> (Default: False ) Log the requests. ROLES_ACCESS \u2014> Roles and their corresponding rights. DEFAULT_ROLE \u2014> Default role for new users. QUERIES_INFO \u2014> Query's description. MUTATIONS_INFO \u2014> Mutation's description. ROLES \u2014> Your roles. APPS \u2014> Your apps. import os import sys from core.roles import ROLES # Include apps/ sys . path . insert ( 0 , os . path . join ( BASE_DIR , \"apps\" )) # Include Core Apps INSTALLED_APPS += [ # Users \"users\" , # Filters \"django_filters\" , # GraphQL \"graphene_django\" , # GraphDJ \"graphdj\" , # CORS #\"corsheaders\", ] # GraphQL -> Graphene GRAPHENE = { \"ATOMIC_MUTATIONS\" : True , \"RELAY_CONNECTION_MAX_LIMIT\" : 100 , } # Add your <project-apps> here. GRAPHDJ = { \"ADMIN\" : True , \"CAMELCASE\" : True , \"LOGGING\" : True , \"ROLES_ACCESS\" : ROLES , \"DEFAULT_ROLE\" : 1 , \"QUERIES_INFO\" : \"Awesome Queries!\" , \"MUTATIONS_INFO\" : \"Awesome Mutations!\" , \"ROLES\" : { 0 : \"visitor\" , 1 : \"admin\" , 2 : \"customer\" , # etc . . . }, \"APPS\" : [ \"app_1\" , \"app_2\" , \"app_3\" , # etc . . . ], } INSTALLED_APPS . extend ( GRAPHDJ [ \"APPS\" ])","title":"Settings"},{"location":"configure/settings/#settingspy","text":"After setting up your roles . You can update your core/roles.py file by running the following custom django command . python manage.py build-roles You can then use the roles inside your settings following the example below.","title":"Settings.py"},{"location":"configure/settings/#fields","text":"ADMIN \u2014> (Default: False ) Auto-include models in your Django's Admin page. CAMELCASE \u2014> (Default: False ) Transform cookbook_category into cookbookCategory . LOGGING \u2014> (Default: False ) Log the requests. ROLES_ACCESS \u2014> Roles and their corresponding rights. DEFAULT_ROLE \u2014> Default role for new users. QUERIES_INFO \u2014> Query's description. MUTATIONS_INFO \u2014> Mutation's description. ROLES \u2014> Your roles. APPS \u2014> Your apps. import os import sys from core.roles import ROLES # Include apps/ sys . path . insert ( 0 , os . path . join ( BASE_DIR , \"apps\" )) # Include Core Apps INSTALLED_APPS += [ # Users \"users\" , # Filters \"django_filters\" , # GraphQL \"graphene_django\" , # GraphDJ \"graphdj\" , # CORS #\"corsheaders\", ] # GraphQL -> Graphene GRAPHENE = { \"ATOMIC_MUTATIONS\" : True , \"RELAY_CONNECTION_MAX_LIMIT\" : 100 , } # Add your <project-apps> here. GRAPHDJ = { \"ADMIN\" : True , \"CAMELCASE\" : True , \"LOGGING\" : True , \"ROLES_ACCESS\" : ROLES , \"DEFAULT_ROLE\" : 1 , \"QUERIES_INFO\" : \"Awesome Queries!\" , \"MUTATIONS_INFO\" : \"Awesome Mutations!\" , \"ROLES\" : { 0 : \"visitor\" , 1 : \"admin\" , 2 : \"customer\" , # etc . . . }, \"APPS\" : [ \"app_1\" , \"app_2\" , \"app_3\" , # etc . . . ], } INSTALLED_APPS . extend ( GRAPHDJ [ \"APPS\" ])","title":"Fields:"},{"location":"configure/setup/","text":"Setup/ Roles & Plural words. roles/ Use yaml files to create your role(s) configurations. plurals.py Configure NOUNS = {} to pluralize manually. For example: { \"man\" : \"men\" } meaning { \"singular\" : \"plural\" } In the example below you will see that for the create and update we use the singular verb. And for read we use the plural version of the word. Create & Update Use the \" singular \" verb as the field-name . Read Use the \" plural \" verb as the field-name . But . . . Why? In the example below we have 2\u2014Models ( Category & Ingredient ). When we want to call the ingredients from our category model we are calling for any X\u2014amount of ingredients belonging to the selected category. Therefore, is easier to keep consistency if we make things singular and plural from the get-go. You either want a singular-object or a list-of-objects . class Category ( models . Model ): name = models . CharField ( max_length = 100 ) class Ingredient ( models . Model ): name = models . CharField ( max_length = 100 ) category = models . ForeignKey ( Category , on_delete = models . CASCADE , related_name = \"ingredients\" ) class Recipe ( models . Model ): name = models . CharField ( max_length = 100 ) ingredient = models . ForeignKey ( Ingredient , on_delete = models . CASCADE , related_name = \"recipes\" ) Roles Columns: [field_1, field_2, field_3: app.model] Related: [field_3 : app.model] Examples setup/roles/example.yaml Role.yaml Role: visitor App: cookbook Models: category, ingredient & recipe # Role visitor : # App cookbook : # Model-1 category : create : [ id , name ] update : [ id , name ] read : [ id , name , ingredients : cookbook.ingredient ] delete : [ del ] # Model-2 ingredient : create : [ id , name , category : cookbook.category ] update : [ id , name , category : cookbook.category ] read : [ id , name , recipes : cookbook.recipe ] delete : [ del ] # Model-3 recipe : create : [ id , name ] update : [ id , name ] read : [ id , name ] delete : [ del ] setup/plurals.py Plurals.py It also uses regex to replace patterns based on english pluralization rules but in case something is misspelled you can fix it manually. For example: category \u2014> categories NOUNS = { \"person\" : \"people\" , \"man\" : \"men\" , \"woman\" : \"women\" } (Built-in) plurals Built-in It also uses regex to replace patterns based on english pluralization rules but in case something is misspelled you can fix it manually. For example: category \u2014> categories NOUNS = { \"aircraft\" : \"aircraft\" , \"alumna\" : \"alumnae\" , \"analysis\" : \"analyses\" , \"apex\" : \"apices\" , \"bison\" : \"bison\" , \"cactus\" : \"cacti\" , \"child\" : \"children\" , \"codex\" : \"codices\" , \"crisis\" : \"crises\" , \"criterion\" : \"criteria\" , \"curriculum\" : \"curricula\" , \"datum\" : \"data\" , \"diagnosis\" : \"diagnoses\" , \"ellipsis\" : \"ellipses\" , \"erratum\" : \"errata\" , \"fish\" : \"fish\" , \"focus\" : \"foci\" , \"foot\" : \"feet\" , \"genus\" : \"genera\" , \"goose\" : \"geese\" , \"index\" : \"indices\" , \"larva\" : \"larvae\" , \"louse\" : \"lice\" , \"man\" : \"men\" , \"means\" : \"means\" , \"mouse\" : \"mice\" , \"oasis\" : \"oases\" , \"ox\" : \"oxen\" , \"person\" : \"people\" , \"quiz\" : \"quizzes\" , \"series\" : \"series\" , \"sheep\" : \"sheep\" , \"species\" : \"species\" , \"swine\" : \"swine\" , \"tooth\" : \"teeth\" , \"trout\" : \"trout\" , \"tuna\" : \"tuna\" , \"vita\" : \"vitae\" , \"woman\" : \"women\" , }","title":"Setup"},{"location":"configure/setup/#setup","text":"","title":"Setup/"},{"location":"configure/setup/#roles-plural-words","text":"roles/ Use yaml files to create your role(s) configurations. plurals.py Configure NOUNS = {} to pluralize manually. For example: { \"man\" : \"men\" } meaning { \"singular\" : \"plural\" } In the example below you will see that for the create and update we use the singular verb. And for read we use the plural version of the word.","title":"Roles &amp; Plural words."},{"location":"configure/setup/#create-update","text":"Use the \" singular \" verb as the field-name .","title":"Create &amp; Update"},{"location":"configure/setup/#read","text":"Use the \" plural \" verb as the field-name .","title":"Read"},{"location":"configure/setup/#but-why","text":"In the example below we have 2\u2014Models ( Category & Ingredient ). When we want to call the ingredients from our category model we are calling for any X\u2014amount of ingredients belonging to the selected category. Therefore, is easier to keep consistency if we make things singular and plural from the get-go. You either want a singular-object or a list-of-objects . class Category ( models . Model ): name = models . CharField ( max_length = 100 ) class Ingredient ( models . Model ): name = models . CharField ( max_length = 100 ) category = models . ForeignKey ( Category , on_delete = models . CASCADE , related_name = \"ingredients\" ) class Recipe ( models . Model ): name = models . CharField ( max_length = 100 ) ingredient = models . ForeignKey ( Ingredient , on_delete = models . CASCADE , related_name = \"recipes\" )","title":"But . . . Why?"},{"location":"configure/setup/#roles","text":"Columns: [field_1, field_2, field_3: app.model] Related: [field_3 : app.model]","title":"Roles"},{"location":"configure/setup/#examples","text":"setup/roles/example.yaml","title":"Examples"},{"location":"configure/setup/#roleyaml","text":"Role: visitor App: cookbook Models: category, ingredient & recipe # Role visitor : # App cookbook : # Model-1 category : create : [ id , name ] update : [ id , name ] read : [ id , name , ingredients : cookbook.ingredient ] delete : [ del ] # Model-2 ingredient : create : [ id , name , category : cookbook.category ] update : [ id , name , category : cookbook.category ] read : [ id , name , recipes : cookbook.recipe ] delete : [ del ] # Model-3 recipe : create : [ id , name ] update : [ id , name ] read : [ id , name ] delete : [ del ] setup/plurals.py","title":"Role.yaml"},{"location":"configure/setup/#pluralspy","text":"It also uses regex to replace patterns based on english pluralization rules but in case something is misspelled you can fix it manually. For example: category \u2014> categories NOUNS = { \"person\" : \"people\" , \"man\" : \"men\" , \"woman\" : \"women\" } (Built-in) plurals","title":"Plurals.py"},{"location":"configure/setup/#built-in","text":"It also uses regex to replace patterns based on english pluralization rules but in case something is misspelled you can fix it manually. For example: category \u2014> categories NOUNS = { \"aircraft\" : \"aircraft\" , \"alumna\" : \"alumnae\" , \"analysis\" : \"analyses\" , \"apex\" : \"apices\" , \"bison\" : \"bison\" , \"cactus\" : \"cacti\" , \"child\" : \"children\" , \"codex\" : \"codices\" , \"crisis\" : \"crises\" , \"criterion\" : \"criteria\" , \"curriculum\" : \"curricula\" , \"datum\" : \"data\" , \"diagnosis\" : \"diagnoses\" , \"ellipsis\" : \"ellipses\" , \"erratum\" : \"errata\" , \"fish\" : \"fish\" , \"focus\" : \"foci\" , \"foot\" : \"feet\" , \"genus\" : \"genera\" , \"goose\" : \"geese\" , \"index\" : \"indices\" , \"larva\" : \"larvae\" , \"louse\" : \"lice\" , \"man\" : \"men\" , \"means\" : \"means\" , \"mouse\" : \"mice\" , \"oasis\" : \"oases\" , \"ox\" : \"oxen\" , \"person\" : \"people\" , \"quiz\" : \"quizzes\" , \"series\" : \"series\" , \"sheep\" : \"sheep\" , \"species\" : \"species\" , \"swine\" : \"swine\" , \"tooth\" : \"teeth\" , \"trout\" : \"trout\" , \"tuna\" : \"tuna\" , \"vita\" : \"vitae\" , \"woman\" : \"women\" , }","title":"Built-in"},{"location":"configure/urls/","text":"Urls.py Initiate your Schema here. import graphdj from django.conf import settings from django.contrib import admin from django.urls import path from django.views.decorators.csrf import csrf_exempt from django.contrib.auth.mixins import LoginRequiredMixin from graphene_django.views import GraphQLView # Require Login class PrivateGraphQLView ( LoginRequiredMixin , GraphQLView ): pass # The Schema schema = graphdj . schema () # Middleware Setup middleware = [] if not settings . DEBUG : middleware . append ( graphdj . DisableIntrospect ) # GraphQL Api GapiView = csrf_exempt ( #GraphQLView or PrivateGraphQLView PrivateGraphQLView . as_view ( graphiql = settings . DEBUG , schema = schema , middleware = middleware ) ) # URLs urlpatterns = [ path ( \"admin/\" , admin . site . urls ), path ( \"graphql/\" , GapiView ), ]","title":"URLs / Schema"},{"location":"configure/urls/#urlspy","text":"","title":"Urls.py"},{"location":"configure/urls/#initiate-your-schema-here","text":"import graphdj from django.conf import settings from django.contrib import admin from django.urls import path from django.views.decorators.csrf import csrf_exempt from django.contrib.auth.mixins import LoginRequiredMixin from graphene_django.views import GraphQLView # Require Login class PrivateGraphQLView ( LoginRequiredMixin , GraphQLView ): pass # The Schema schema = graphdj . schema () # Middleware Setup middleware = [] if not settings . DEBUG : middleware . append ( graphdj . DisableIntrospect ) # GraphQL Api GapiView = csrf_exempt ( #GraphQLView or PrivateGraphQLView PrivateGraphQLView . as_view ( graphiql = settings . DEBUG , schema = schema , middleware = middleware ) ) # URLs urlpatterns = [ path ( \"admin/\" , admin . site . urls ), path ( \"graphql/\" , GapiView ), ]","title":"Initiate your Schema here."},{"location":"configure/users/","text":"Add to apps/users/models.py from django.conf import settings from django.contrib.auth.models import AbstractUser # Create your models here. from django.db import models from graphdj.models import GraphqlMixin ROLES = settings . GRAPHDJ . get ( \"ROLES\" ) DEFAULT_ROLE = settings . GRAPHDJ . get ( \"DEFAULT_ROLE\" ) class User ( AbstractUser ): username = models . CharField ( max_length = 128 , unique = True ) role = models . PositiveSmallIntegerField ( choices = ROLES . items (), blank = True , null = True , default = DEFAULT_ROLE ) def __str__ ( self ): return self . username class Meta : db_table = \"user\" class Graphql ( GraphqlMixin ): pass Run Migrations python manage.py makemigrations users python manage.py migrate","title":"Users"},{"location":"configure/users/#add-to-appsusersmodelspy","text":"from django.conf import settings from django.contrib.auth.models import AbstractUser # Create your models here. from django.db import models from graphdj.models import GraphqlMixin ROLES = settings . GRAPHDJ . get ( \"ROLES\" ) DEFAULT_ROLE = settings . GRAPHDJ . get ( \"DEFAULT_ROLE\" ) class User ( AbstractUser ): username = models . CharField ( max_length = 128 , unique = True ) role = models . PositiveSmallIntegerField ( choices = ROLES . items (), blank = True , null = True , default = DEFAULT_ROLE ) def __str__ ( self ): return self . username class Meta : db_table = \"user\" class Graphql ( GraphqlMixin ): pass","title":"Add to apps/users/models.py"},{"location":"configure/users/#run-migrations","text":"python manage.py makemigrations users python manage.py migrate","title":"Run Migrations"},{"location":"tutorial/cookbook-fixtures/","text":"Copy and Paste the data in fixtures.JSON to the file apps/cookbook/fixtures/cookbook.json mkdir apps/cookbook/fixtures touch apps/cookbook/fixtures/cookbook.json Run Command python -m pipenv run python manage.py loaddata cookbook fixtures.JSON [ { \"model\" : \"cookbook.category\" , \"pk\" : 1 , \"fields\" : { \"name\" : \"Dairy\" } }, { \"model\" : \"cookbook.category\" , \"pk\" : 2 , \"fields\" : { \"name\" : \"Meat\" } }, { \"model\" : \"cookbook.ingredient\" , \"pk\" : 1 , \"fields\" : { \"name\" : \"Eggs\" , \"notes\" : \"Good old eggs\" , \"category\" : 1 } }, { \"model\" : \"cookbook.ingredient\" , \"pk\" : 2 , \"fields\" : { \"name\" : \"Milk\" , \"notes\" : \"Comes from a cow\" , \"category\" : 1 } }, { \"model\" : \"cookbook.ingredient\" , \"pk\" : 3 , \"fields\" : { \"name\" : \"Beef\" , \"notes\" : \"Much like milk, this comes from a cow\" , \"category\" : 2 } }, { \"model\" : \"cookbook.ingredient\" , \"pk\" : 4 , \"fields\" : { \"name\" : \"Chicken\" , \"notes\" : \"Definitely doesn't come from a cow\" , \"category\" : 2 } }, { \"model\" : \"cookbook.recipe\" , \"pk\" : 1 , \"fields\" : { \"name\" : \"Recipe-1\" , \"ingredient\" : 1 } }, { \"model\" : \"cookbook.recipe\" , \"pk\" : 2 , \"fields\" : { \"name\" : \"Recipe-2\" , \"ingredient\" : 1 } }, { \"model\" : \"cookbook.recipe\" , \"pk\" : 2 , \"fields\" : { \"name\" : \"Recipe-3\" , \"ingredient\" : 2 } } ]","title":"Fixtures"},{"location":"tutorial/create-app/","text":"Where {app_name} is your app. python -m pipenv run python manage.py create-app { app_name } The following example is a modified copy from Graphene Django Create python -m pipenv run python manage.py create-app cookbook Models # apps/cookbook/models.py from django.db import models from graphdj.models import GraphqlBase class Category ( GraphqlBase ): name = models . CharField ( max_length = 100 ) def __str__ ( self ): return self . name class Ingredient ( GraphqlBase ): name = models . CharField ( max_length = 100 ) notes = models . TextField () category = models . ForeignKey ( Category , related_name = \"ingredients\" , on_delete = models . CASCADE ) def __str__ ( self ): return self . name class Recipe ( GraphqlBase ): name = models . CharField ( max_length = 100 ) ingredient = models . ForeignKey ( Ingredient , related_name = \"recipes\" , on_delete = models . CASCADE ) def __str__ ( self ): return self . name Add in settings/common.py under \" APPS \" GRAPHDJ = { # ... \"APPS\" : [ \"cookbook\" , # ... ], } INSTALLED_APPS . extend ( GRAPHDJ [ \"APPS\" ]) Run Migrations python -m pipenv run python manage.py makemigrations cookbook python -m pipenv run python manage.py migrate","title":"Create App"},{"location":"tutorial/create-app/#create","text":"python -m pipenv run python manage.py create-app cookbook","title":"Create"},{"location":"tutorial/create-app/#models","text":"# apps/cookbook/models.py from django.db import models from graphdj.models import GraphqlBase class Category ( GraphqlBase ): name = models . CharField ( max_length = 100 ) def __str__ ( self ): return self . name class Ingredient ( GraphqlBase ): name = models . CharField ( max_length = 100 ) notes = models . TextField () category = models . ForeignKey ( Category , related_name = \"ingredients\" , on_delete = models . CASCADE ) def __str__ ( self ): return self . name class Recipe ( GraphqlBase ): name = models . CharField ( max_length = 100 ) ingredient = models . ForeignKey ( Ingredient , related_name = \"recipes\" , on_delete = models . CASCADE ) def __str__ ( self ): return self . name","title":"Models"},{"location":"tutorial/create-app/#add-in-settingscommonpy-under-apps","text":"GRAPHDJ = { # ... \"APPS\" : [ \"cookbook\" , # ... ], } INSTALLED_APPS . extend ( GRAPHDJ [ \"APPS\" ])","title":"Add in settings/common.py under \"APPS\""},{"location":"tutorial/create-app/#run-migrations","text":"python -m pipenv run python manage.py makemigrations cookbook python -m pipenv run python manage.py migrate","title":"Run Migrations"},{"location":"tutorial/graphql/","text":"Create Super-User python -m pipenv run python manage.py createsuperuser \\ --username admin \\ --email admin@example.com Run Server \u2014 Development Mode sh rundevops.sh Go to Admin-Login Go to the Server! Copy & Paste the code below. query availableQueries { __schema { queryType { fields { name } } } } query availableMutations { __schema { mutationType { fields { name } } } } mutation createCategory { cookbookCategoryEditor(input: {name: \"hello\"}) { category { id name } } } mutation updateCategory { cookbookCategoryEditor(input: {ids: \"a_relay_id(s)\", name: \"proteins\"}) { category { id name } } } mutation deleteCategory { cookbookCategoryEditor(input: {ids: \"a_relay_id(s)\", del: true}) { category { id name } } } query cookbookCategory { cookbookCategory(id: \"a_relay_id\") { id name } } query cookbookCategories { cookbookCategories { edges { node { id name ingredients { edges { node { id name recipes { edges { node { id name } } } } } } } } } }","title":"GraphQL"},{"location":"tutorial/graphql/#create-super-user","text":"python -m pipenv run python manage.py createsuperuser \\ --username admin \\ --email admin@example.com","title":"Create Super-User"},{"location":"tutorial/graphql/#run-server-development-mode","text":"sh rundevops.sh","title":"Run Server \u2014 Development Mode"},{"location":"tutorial/graphql/#go-to-admin-login","text":"","title":"Go to Admin-Login"},{"location":"tutorial/graphql/#go-to-the-server","text":"Copy & Paste the code below. query availableQueries { __schema { queryType { fields { name } } } } query availableMutations { __schema { mutationType { fields { name } } } } mutation createCategory { cookbookCategoryEditor(input: {name: \"hello\"}) { category { id name } } } mutation updateCategory { cookbookCategoryEditor(input: {ids: \"a_relay_id(s)\", name: \"proteins\"}) { category { id name } } } mutation deleteCategory { cookbookCategoryEditor(input: {ids: \"a_relay_id(s)\", del: true}) { category { id name } } } query cookbookCategory { cookbookCategory(id: \"a_relay_id\") { id name } } query cookbookCategories { cookbookCategories { edges { node { id name ingredients { edges { node { id name recipes { edges { node { id name } } } } } } } } } }","title":"Go to the Server!"},{"location":"tutorial/install/","text":"python -m pipenv install django Start project from Template python -m pipenv run django-admin startproject \\ --template = https://github.com/hlop3z/graphdj-template/archive/refs/heads/main.zip \\ --name = Procfile \\ write_your_project_name_here Settings/ base.py \u2014 Django's default settings. common.py \u2014 Used in (development, test & production) development.py i18n.py production.py test.py common.py This is where most settings will live under. Then Change Directory ( cd ) to your project. cd write_your_project_name_here Then \u2014 Recreate Development python -m pipenv install --dev Then \u2014 Move file .env mv .env_example.cfg .env.cfg Create Logs Dir & Server-Log File . mkdir -p logs touch logs/server.jsonl Then \u2014 Create a Secret-Key After creating the Secret-Key add it inside the .env.cfg file in the DJANGO_SECRET_KEY variable. Optionally : You can choose a size as a parameter for example \u2014> keygen.sh 64 sh scripts/keygen.sh Run Migrations python -m pipenv run python manage.py makemigrations users python -m pipenv run python manage.py migrate","title":"Install"},{"location":"tutorial/install/#start-project-from-template","text":"python -m pipenv run django-admin startproject \\ --template = https://github.com/hlop3z/graphdj-template/archive/refs/heads/main.zip \\ --name = Procfile \\ write_your_project_name_here","title":"Start project from Template"},{"location":"tutorial/install/#settings","text":"base.py \u2014 Django's default settings. common.py \u2014 Used in (development, test & production) development.py i18n.py production.py test.py common.py This is where most settings will live under.","title":"Settings/"},{"location":"tutorial/install/#then-change-directory-cd-to-your-project","text":"cd write_your_project_name_here","title":"Then Change Directory (cd) to your project."},{"location":"tutorial/install/#then-recreate-development","text":"python -m pipenv install --dev","title":"Then \u2014 Recreate Development"},{"location":"tutorial/install/#then-move-file-env","text":"mv .env_example.cfg .env.cfg","title":"Then \u2014 Move file .env"},{"location":"tutorial/install/#create-logs-dir-server-log-file","text":"mkdir -p logs touch logs/server.jsonl","title":"Create Logs Dir &amp; Server-Log File."},{"location":"tutorial/install/#then-create-a-secret-key","text":"After creating the Secret-Key add it inside the .env.cfg file in the DJANGO_SECRET_KEY variable. Optionally : You can choose a size as a parameter for example \u2014> keygen.sh 64 sh scripts/keygen.sh","title":"Then \u2014 Create a Secret-Key"},{"location":"tutorial/install/#run-migrations","text":"python -m pipenv run python manage.py makemigrations users python -m pipenv run python manage.py migrate","title":"Run Migrations"}]}